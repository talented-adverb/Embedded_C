
UART_RECEIVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c7c  08002c7c  00003c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c94  08002c94  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c9c  08002c9c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c9c  08002c9c  00003c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ca4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002cb0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002cb0  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092e1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ce  00000000  00000000  0000d31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005cd  00000000  00000000  0000f488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204e8  00000000  00000000  0000fa55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a527  00000000  00000000  0002ff3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4be6  00000000  00000000  0003a464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff04a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ddc  00000000  00000000  000ff090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00100e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c64 	.word	0x08002c64

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002c64 	.word	0x08002c64

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f9f4 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f830 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8ca 	bl	8000698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f89e 	bl	8000644 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //polling method
	  HAL_UART_Receive_IT(&huart2,rx_buffer,4);
 8000508:	2204      	movs	r2, #4
 800050a:	4912      	ldr	r1, [pc, #72]	@ (8000554 <main+0x60>)
 800050c:	4812      	ldr	r0, [pc, #72]	@ (8000558 <main+0x64>)
 800050e:	f001 fc4f 	bl	8001db0 <HAL_UART_Receive_IT>
	  if((rx_buffer[0]=='H') && (rx_buffer[1]=='A') && (rx_buffer[2]=='C') && (rx_buffer[3]=='K')){
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <main+0x60>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b48      	cmp	r3, #72	@ 0x48
 8000518:	d1f6      	bne.n	8000508 <main+0x14>
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <main+0x60>)
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	2b41      	cmp	r3, #65	@ 0x41
 8000520:	d1f2      	bne.n	8000508 <main+0x14>
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <main+0x60>)
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	2b43      	cmp	r3, #67	@ 0x43
 8000528:	d1ee      	bne.n	8000508 <main+0x14>
 800052a:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <main+0x60>)
 800052c:	78db      	ldrb	r3, [r3, #3]
 800052e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000530:	d1ea      	bne.n	8000508 <main+0x14>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000532:	2120      	movs	r1, #32
 8000534:	4809      	ldr	r0, [pc, #36]	@ (800055c <main+0x68>)
 8000536:	f000 fd98 	bl	800106a <HAL_GPIO_TogglePin>
		  rx_buffer[0]=0;
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <main+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
		  rx_buffer[1]=0;
 8000540:	4b04      	ldr	r3, [pc, #16]	@ (8000554 <main+0x60>)
 8000542:	2200      	movs	r2, #0
 8000544:	705a      	strb	r2, [r3, #1]
		  rx_buffer[2]=0;
 8000546:	4b03      	ldr	r3, [pc, #12]	@ (8000554 <main+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	709a      	strb	r2, [r3, #2]
		  rx_buffer[3]=0;
 800054c:	4b01      	ldr	r3, [pc, #4]	@ (8000554 <main+0x60>)
 800054e:	2200      	movs	r2, #0
 8000550:	70da      	strb	r2, [r3, #3]
	  HAL_UART_Receive_IT(&huart2,rx_buffer,4);
 8000552:	e7d9      	b.n	8000508 <main+0x14>
 8000554:	20000070 	.word	0x20000070
 8000558:	20000028 	.word	0x20000028
 800055c:	40020000 	.word	0x40020000

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	@ 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fb4c 	bl	8002c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <SystemClock_Config+0xdc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a2b      	ldr	r2, [pc, #172]	@ (800063c <SystemClock_Config+0xdc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b29      	ldr	r3, [pc, #164]	@ (800063c <SystemClock_Config+0xdc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <SystemClock_Config+0xe0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a25      	ldr	r2, [pc, #148]	@ (8000640 <SystemClock_Config+0xe0>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <SystemClock_Config+0xe0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005d4:	23b4      	movs	r3, #180	@ 0xb4
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f8f3 	bl	80017d4 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f882 	bl	80006fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005f8:	f000 fd52 	bl	80010a0 <HAL_PWREx_EnableOverDrive>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000602:	f000 f87b 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fd8b 	bl	8001140 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000630:	f000 f864 	bl	80006fc <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	@ 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <MX_USART2_UART_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 8000650:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <MX_USART2_UART_Init+0x4c>)
 800067c:	f001 fb48 	bl	8001d10 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000686:	f000 f839 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_GPIO_Init+0x5c>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	4a0f      	ldr	r2, [pc, #60]	@ (80006f4 <MX_GPIO_Init+0x5c>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <MX_GPIO_Init+0x5c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	480a      	ldr	r0, [pc, #40]	@ (80006f8 <MX_GPIO_Init+0x60>)
 80006ce:	f000 fcb3 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006d2:	2320      	movs	r3, #32
 80006d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_GPIO_Init+0x60>)
 80006e8:	f000 fb12 	bl	8000d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000716:	4a0f      	ldr	r2, [pc, #60]	@ (8000754 <HAL_MspInit+0x4c>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071c:	6453      	str	r3, [r2, #68]	@ 0x44
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	@ 0x40
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000746:	2007      	movs	r0, #7
 8000748:	f000 fa0e 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1d      	ldr	r2, [pc, #116]	@ (80007ec <HAL_UART_MspInit+0x94>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d133      	bne.n	80007e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <HAL_UART_MspInit+0x98>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	4a1b      	ldr	r2, [pc, #108]	@ (80007f0 <HAL_UART_MspInit+0x98>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000788:	6413      	str	r3, [r2, #64]	@ 0x40
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <HAL_UART_MspInit+0x98>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_UART_MspInit+0x98>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <HAL_UART_MspInit+0x98>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_UART_MspInit+0x98>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007b2:	230c      	movs	r3, #12
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c2:	2307      	movs	r3, #7
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <HAL_UART_MspInit+0x9c>)
 80007ce:	f000 fa9f 	bl	8000d10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2026      	movs	r0, #38	@ 0x26
 80007d8:	f000 f9d1 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007dc:	2026      	movs	r0, #38	@ 0x26
 80007de:	f000 f9ea 	bl	8000bb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	@ 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40004400 	.word	0x40004400
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <UsageFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f89b 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <USART2_IRQHandler+0x10>)
 800085e:	f001 facd 	bl	8001dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028

0800086c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <SystemInit+0x20>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000876:	4a05      	ldr	r2, [pc, #20]	@ (800088c <SystemInit+0x20>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000894:	f7ff ffea 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	@ (80008d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	@ (80008dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008be:	f002 f9ad 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c2:	f7ff fe17 	bl	80004f4 <main>
  bx  lr    
 80008c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d4:	08002ca4 	.word	0x08002ca4
  ldr r2, =_sbss
 80008d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008dc:	20000078 	.word	0x20000078

080008e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <HAL_Init+0x40>)
 80008ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_Init+0x40>)
 80008fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <HAL_Init+0x40>)
 8000906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800090a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f92b 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	2000      	movs	r0, #0
 8000914:	f000 f808 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff fef6 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023c00 	.word	0x40023c00

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_InitTick+0x54>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x58>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f943 	bl	8000bd2 <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e00e      	b.n	8000974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d80a      	bhi.n	8000972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 f90b 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <HAL_InitTick+0x5c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000000 	.word	0x20000000
 8000980:	20000008 	.word	0x20000008
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000074 	.word	0x20000074

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000074 	.word	0x20000074

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	@ (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	@ 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff29 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff3e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff31 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffa2 	bl	8000b24 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff feda 	bl	80009b0 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d008      	beq.n	8000c1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2280      	movs	r2, #128	@ 0x80
 8000c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e052      	b.n	8000cc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0216 	bic.w	r2, r2, #22
 8000c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d103      	bne.n	8000c4c <HAL_DMA_Abort+0x62>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0208 	bic.w	r2, r2, #8
 8000c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0201 	bic.w	r2, r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c6c:	e013      	b.n	8000c96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c6e:	f7ff fe9f 	bl	80009b0 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d90c      	bls.n	8000c96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2220      	movs	r2, #32
 8000c80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e015      	b.n	8000cc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e4      	bne.n	8000c6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ca8:	223f      	movs	r2, #63	@ 0x3f
 8000caa:	409a      	lsls	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d004      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2280      	movs	r2, #128	@ 0x80
 8000ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e00c      	b.n	8000d02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2205      	movs	r2, #5
 8000cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e165      	b.n	8000ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8154 	bne.w	8000ff2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80ae 	beq.w	8000ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a58      	ldr	r2, [pc, #352]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8001018 <HAL_GPIO_Init+0x308>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d025      	beq.n	8000f2a <HAL_GPIO_Init+0x21a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800101c <HAL_GPIO_Init+0x30c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01f      	beq.n	8000f26 <HAL_GPIO_Init+0x216>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8001020 <HAL_GPIO_Init+0x310>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x212>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8001024 <HAL_GPIO_Init+0x314>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x20e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8001028 <HAL_GPIO_Init+0x318>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x20a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4a      	ldr	r2, [pc, #296]	@ (800102c <HAL_GPIO_Init+0x31c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x206>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a49      	ldr	r2, [pc, #292]	@ (8001030 <HAL_GPIO_Init+0x320>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x202>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f12:	2307      	movs	r3, #7
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a31      	ldr	r2, [pc, #196]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae96 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4013      	ands	r3, r2
 8001082:	041a      	lsls	r2, r3, #16
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43d9      	mvns	r1, r3
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	400b      	ands	r3, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <HAL_PWREx_EnableOverDrive+0x90>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <HAL_PWREx_EnableOverDrive+0x90>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <HAL_PWREx_EnableOverDrive+0x90>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_PWREx_EnableOverDrive+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff fc70 	bl	80009b0 <HAL_GetTick>
 80010d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010d2:	e009      	b.n	80010e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010d4:	f7ff fc6c 	bl	80009b0 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010e2:	d901      	bls.n	80010e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e01f      	b.n	8001128 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_PWREx_EnableOverDrive+0x98>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d1ee      	bne.n	80010d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fc:	f7ff fc58 	bl	80009b0 <HAL_GetTick>
 8001100:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001102:	e009      	b.n	8001118 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001104:	f7ff fc54 	bl	80009b0 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001112:	d901      	bls.n	8001118 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e007      	b.n	8001128 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <HAL_PWREx_EnableOverDrive+0x98>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001124:	d1ee      	bne.n	8001104 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	420e0040 	.word	0x420e0040
 8001138:	40007000 	.word	0x40007000
 800113c:	420e0044 	.word	0x420e0044

08001140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0cc      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b68      	ldr	r3, [pc, #416]	@ (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d90c      	bls.n	800117c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b65      	ldr	r3, [pc, #404]	@ (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	@ (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4b59      	ldr	r3, [pc, #356]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a58      	ldr	r2, [pc, #352]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800119e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4b53      	ldr	r3, [pc, #332]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a52      	ldr	r2, [pc, #328]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4b50      	ldr	r3, [pc, #320]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	494d      	ldr	r1, [pc, #308]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d044      	beq.n	8001260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d119      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d003      	beq.n	80011fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fe:	4b3f      	ldr	r3, [pc, #252]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e067      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121e:	4b37      	ldr	r3, [pc, #220]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f023 0203 	bic.w	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4934      	ldr	r1, [pc, #208]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001230:	f7ff fbbe 	bl	80009b0 <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	e00a      	b.n	800124e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001238:	f7ff fbba 	bl	80009b0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e04f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 020c 	and.w	r2, r3, #12
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d1eb      	bne.n	8001238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001260:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d20c      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4916      	ldr	r1, [pc, #88]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	490e      	ldr	r1, [pc, #56]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f855 	bl	8001374 <HAL_RCC_GetSysClockFreq>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	490a      	ldr	r1, [pc, #40]	@ (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fb1e 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00
 80012fc:	40023800 	.word	0x40023800
 8001300:	08002c7c 	.word	0x08002c7c
 8001304:	20000000 	.word	0x20000000
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_RCC_GetHCLKFreq+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000

08001324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001328:	f7ff fff0 	bl	800130c <HAL_RCC_GetHCLKFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	0a9b      	lsrs	r3, r3, #10
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	4903      	ldr	r1, [pc, #12]	@ (8001348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	08002c8c 	.word	0x08002c8c

0800134c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001350:	f7ff ffdc 	bl	800130c <HAL_RCC_GetHCLKFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	0b5b      	lsrs	r3, r3, #13
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	4903      	ldr	r1, [pc, #12]	@ (8001370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	08002c8c 	.word	0x08002c8c

08001374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001378:	b0ae      	sub	sp, #184	@ 0xb8
 800137a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800139a:	4bcb      	ldr	r3, [pc, #812]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	f200 8206 	bhi.w	80017b4 <HAL_RCC_GetSysClockFreq+0x440>
 80013a8:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080013e5 	.word	0x080013e5
 80013b4:	080017b5 	.word	0x080017b5
 80013b8:	080017b5 	.word	0x080017b5
 80013bc:	080017b5 	.word	0x080017b5
 80013c0:	080013ed 	.word	0x080013ed
 80013c4:	080017b5 	.word	0x080017b5
 80013c8:	080017b5 	.word	0x080017b5
 80013cc:	080017b5 	.word	0x080017b5
 80013d0:	080013f5 	.word	0x080013f5
 80013d4:	080017b5 	.word	0x080017b5
 80013d8:	080017b5 	.word	0x080017b5
 80013dc:	080017b5 	.word	0x080017b5
 80013e0:	080015e5 	.word	0x080015e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013e4:	4bb9      	ldr	r3, [pc, #740]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x358>)
 80013e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013ea:	e1e7      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013ec:	4bb8      	ldr	r3, [pc, #736]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013f2:	e1e3      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f4:	4bb4      	ldr	r3, [pc, #720]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001400:	4bb1      	ldr	r3, [pc, #708]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d071      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140c:	4bae      	ldr	r3, [pc, #696]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	2200      	movs	r2, #0
 8001414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001418:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800141c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800142e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001432:	4622      	mov	r2, r4
 8001434:	462b      	mov	r3, r5
 8001436:	f04f 0000 	mov.w	r0, #0
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	0159      	lsls	r1, r3, #5
 8001440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001444:	0150      	lsls	r0, r2, #5
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4621      	mov	r1, r4
 800144c:	1a51      	subs	r1, r2, r1
 800144e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001450:	4629      	mov	r1, r5
 8001452:	eb63 0301 	sbc.w	r3, r3, r1
 8001456:	647b      	str	r3, [r7, #68]	@ 0x44
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001464:	4649      	mov	r1, r9
 8001466:	018b      	lsls	r3, r1, #6
 8001468:	4641      	mov	r1, r8
 800146a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800146e:	4641      	mov	r1, r8
 8001470:	018a      	lsls	r2, r1, #6
 8001472:	4641      	mov	r1, r8
 8001474:	1a51      	subs	r1, r2, r1
 8001476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001478:	4649      	mov	r1, r9
 800147a:	eb63 0301 	sbc.w	r3, r3, r1
 800147e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800148c:	4649      	mov	r1, r9
 800148e:	00cb      	lsls	r3, r1, #3
 8001490:	4641      	mov	r1, r8
 8001492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001496:	4641      	mov	r1, r8
 8001498:	00ca      	lsls	r2, r1, #3
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	4622      	mov	r2, r4
 80014a2:	189b      	adds	r3, r3, r2
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80014a6:	462b      	mov	r3, r5
 80014a8:	460a      	mov	r2, r1
 80014aa:	eb42 0303 	adc.w	r3, r2, r3
 80014ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014bc:	4629      	mov	r1, r5
 80014be:	024b      	lsls	r3, r1, #9
 80014c0:	4621      	mov	r1, r4
 80014c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014c6:	4621      	mov	r1, r4
 80014c8:	024a      	lsls	r2, r1, #9
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014e0:	f7fe fe90 	bl	8000204 <__aeabi_uldivmod>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4613      	mov	r3, r2
 80014ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014ee:	e067      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4b75      	ldr	r3, [pc, #468]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800150a:	2300      	movs	r3, #0
 800150c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800150e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001512:	4622      	mov	r2, r4
 8001514:	462b      	mov	r3, r5
 8001516:	f04f 0000 	mov.w	r0, #0
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	0159      	lsls	r1, r3, #5
 8001520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001524:	0150      	lsls	r0, r2, #5
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4621      	mov	r1, r4
 800152c:	1a51      	subs	r1, r2, r1
 800152e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001530:	4629      	mov	r1, r5
 8001532:	eb63 0301 	sbc.w	r3, r3, r1
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001544:	4649      	mov	r1, r9
 8001546:	018b      	lsls	r3, r1, #6
 8001548:	4641      	mov	r1, r8
 800154a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800154e:	4641      	mov	r1, r8
 8001550:	018a      	lsls	r2, r1, #6
 8001552:	4641      	mov	r1, r8
 8001554:	ebb2 0a01 	subs.w	sl, r2, r1
 8001558:	4649      	mov	r1, r9
 800155a:	eb63 0b01 	sbc.w	fp, r3, r1
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800156a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800156e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001572:	4692      	mov	sl, r2
 8001574:	469b      	mov	fp, r3
 8001576:	4623      	mov	r3, r4
 8001578:	eb1a 0303 	adds.w	r3, sl, r3
 800157c:	623b      	str	r3, [r7, #32]
 800157e:	462b      	mov	r3, r5
 8001580:	eb4b 0303 	adc.w	r3, fp, r3
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001592:	4629      	mov	r1, r5
 8001594:	028b      	lsls	r3, r1, #10
 8001596:	4621      	mov	r1, r4
 8001598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800159c:	4621      	mov	r1, r4
 800159e:	028a      	lsls	r2, r1, #10
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015a8:	2200      	movs	r2, #0
 80015aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80015ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80015ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015b2:	f7fe fe27 	bl	8000204 <__aeabi_uldivmod>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4613      	mov	r3, r2
 80015bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015c0:	4b41      	ldr	r3, [pc, #260]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	3301      	adds	r3, #1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015e2:	e0eb      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e4:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f0:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d06b      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fc:	4b32      	ldr	r3, [pc, #200]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	2200      	movs	r2, #0
 8001604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800160a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800160e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001610:	2300      	movs	r3, #0
 8001612:	667b      	str	r3, [r7, #100]	@ 0x64
 8001614:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001618:	4622      	mov	r2, r4
 800161a:	462b      	mov	r3, r5
 800161c:	f04f 0000 	mov.w	r0, #0
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	0159      	lsls	r1, r3, #5
 8001626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800162a:	0150      	lsls	r0, r2, #5
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4621      	mov	r1, r4
 8001632:	1a51      	subs	r1, r2, r1
 8001634:	61b9      	str	r1, [r7, #24]
 8001636:	4629      	mov	r1, r5
 8001638:	eb63 0301 	sbc.w	r3, r3, r1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800164a:	4659      	mov	r1, fp
 800164c:	018b      	lsls	r3, r1, #6
 800164e:	4651      	mov	r1, sl
 8001650:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001654:	4651      	mov	r1, sl
 8001656:	018a      	lsls	r2, r1, #6
 8001658:	4651      	mov	r1, sl
 800165a:	ebb2 0801 	subs.w	r8, r2, r1
 800165e:	4659      	mov	r1, fp
 8001660:	eb63 0901 	sbc.w	r9, r3, r1
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001670:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001674:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001678:	4690      	mov	r8, r2
 800167a:	4699      	mov	r9, r3
 800167c:	4623      	mov	r3, r4
 800167e:	eb18 0303 	adds.w	r3, r8, r3
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	462b      	mov	r3, r5
 8001686:	eb49 0303 	adc.w	r3, r9, r3
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001698:	4629      	mov	r1, r5
 800169a:	024b      	lsls	r3, r1, #9
 800169c:	4621      	mov	r1, r4
 800169e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016a2:	4621      	mov	r1, r4
 80016a4:	024a      	lsls	r2, r1, #9
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016ae:	2200      	movs	r2, #0
 80016b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016b8:	f7fe fda4 	bl	8000204 <__aeabi_uldivmod>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4613      	mov	r3, r2
 80016c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016c6:	e065      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x420>
 80016c8:	40023800 	.word	0x40023800
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d4:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x458>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	2200      	movs	r2, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	4611      	mov	r1, r2
 80016e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80016e6:	2300      	movs	r3, #0
 80016e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80016ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016ee:	4642      	mov	r2, r8
 80016f0:	464b      	mov	r3, r9
 80016f2:	f04f 0000 	mov.w	r0, #0
 80016f6:	f04f 0100 	mov.w	r1, #0
 80016fa:	0159      	lsls	r1, r3, #5
 80016fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001700:	0150      	lsls	r0, r2, #5
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4641      	mov	r1, r8
 8001708:	1a51      	subs	r1, r2, r1
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	4649      	mov	r1, r9
 800170e:	eb63 0301 	sbc.w	r3, r3, r1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001720:	4659      	mov	r1, fp
 8001722:	018b      	lsls	r3, r1, #6
 8001724:	4651      	mov	r1, sl
 8001726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800172a:	4651      	mov	r1, sl
 800172c:	018a      	lsls	r2, r1, #6
 800172e:	4651      	mov	r1, sl
 8001730:	1a54      	subs	r4, r2, r1
 8001732:	4659      	mov	r1, fp
 8001734:	eb63 0501 	sbc.w	r5, r3, r1
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	00eb      	lsls	r3, r5, #3
 8001742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001746:	00e2      	lsls	r2, r4, #3
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
 800174c:	4643      	mov	r3, r8
 800174e:	18e3      	adds	r3, r4, r3
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	464b      	mov	r3, r9
 8001754:	eb45 0303 	adc.w	r3, r5, r3
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001766:	4629      	mov	r1, r5
 8001768:	028b      	lsls	r3, r1, #10
 800176a:	4621      	mov	r1, r4
 800176c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001770:	4621      	mov	r1, r4
 8001772:	028a      	lsls	r2, r1, #10
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800177c:	2200      	movs	r2, #0
 800177e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001780:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001782:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001786:	f7fe fd3d 	bl	8000204 <__aeabi_uldivmod>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4613      	mov	r3, r2
 8001790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x458>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0f1b      	lsrs	r3, r3, #28
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017b2:	e003      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	37b8      	adds	r7, #184	@ 0xb8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	00f42400 	.word	0x00f42400

080017d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e28d      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8083 	beq.w	80018fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017f4:	4b94      	ldr	r3, [pc, #592]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d019      	beq.n	8001834 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001800:	4b91      	ldr	r3, [pc, #580]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
        || \
 8001808:	2b08      	cmp	r3, #8
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800180c:	4b8e      	ldr	r3, [pc, #568]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001818:	d00c      	beq.n	8001834 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001822:	2b0c      	cmp	r3, #12
 8001824:	d112      	bne.n	800184c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001826:	4b88      	ldr	r3, [pc, #544]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001832:	d10b      	bne.n	800184c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	4b84      	ldr	r3, [pc, #528]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d05b      	beq.n	80018f8 <HAL_RCC_OscConfig+0x124>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d157      	bne.n	80018f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e25a      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x90>
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e01d      	b.n	80018a0 <HAL_RCC_OscConfig+0xcc>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0xb4>
 800186e:	4b76      	ldr	r3, [pc, #472]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a75      	ldr	r2, [pc, #468]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b73      	ldr	r3, [pc, #460]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a72      	ldr	r2, [pc, #456]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0xcc>
 8001888:	4b6f      	ldr	r3, [pc, #444]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a6e      	ldr	r2, [pc, #440]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b6c      	ldr	r3, [pc, #432]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a6b      	ldr	r2, [pc, #428]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800189e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f882 	bl	80009b0 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f87e 	bl	80009b0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e21f      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b61      	ldr	r3, [pc, #388]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0xdc>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff f86e 	bl	80009b0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff f86a 	bl	80009b0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e20b      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	4b57      	ldr	r3, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x104>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06f      	beq.n	80019e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001906:	4b50      	ldr	r3, [pc, #320]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b00      	cmp	r3, #0
 8001910:	d017      	beq.n	8001942 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001912:	4b4d      	ldr	r3, [pc, #308]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
        || \
 800191a:	2b08      	cmp	r3, #8
 800191c:	d105      	bne.n	800192a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800191e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192a:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d11c      	bne.n	8001970 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001936:	4b44      	ldr	r3, [pc, #272]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d116      	bne.n	8001970 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001942:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_RCC_OscConfig+0x186>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e1d3      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4937      	ldr	r1, [pc, #220]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	e03a      	b.n	80019e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001978:	4b34      	ldr	r3, [pc, #208]	@ (8001a4c <HAL_RCC_OscConfig+0x278>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff f817 	bl	80009b0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff f813 	bl	80009b0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1b4      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4925      	ldr	r1, [pc, #148]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ba:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <HAL_RCC_OscConfig+0x278>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7fe fff6 	bl	80009b0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c8:	f7fe fff2 	bl	80009b0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e193      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d036      	beq.n	8001a60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d016      	beq.n	8001a28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7fe ffd6 	bl	80009b0 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a08:	f7fe ffd2 	bl	80009b0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e173      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x234>
 8001a26:	e01b      	b.n	8001a60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7fe ffbf 	bl	80009b0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	e00e      	b.n	8001a54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a36:	f7fe ffbb 	bl	80009b0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d907      	bls.n	8001a54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e15c      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	42470000 	.word	0x42470000
 8001a50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b8a      	ldr	r3, [pc, #552]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ea      	bne.n	8001a36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8097 	beq.w	8001b9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b83      	ldr	r3, [pc, #524]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b7f      	ldr	r3, [pc, #508]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a7e      	ldr	r2, [pc, #504]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b79      	ldr	r3, [pc, #484]	@ (8001c84 <HAL_RCC_OscConfig+0x4b0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d118      	bne.n	8001adc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aaa:	4b76      	ldr	r3, [pc, #472]	@ (8001c84 <HAL_RCC_OscConfig+0x4b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a75      	ldr	r2, [pc, #468]	@ (8001c84 <HAL_RCC_OscConfig+0x4b0>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe ff7b 	bl	80009b0 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7fe ff77 	bl	80009b0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e118      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8001c84 <HAL_RCC_OscConfig+0x4b0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x31e>
 8001ae4:	4b66      	ldr	r3, [pc, #408]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	4a65      	ldr	r2, [pc, #404]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af0:	e01c      	b.n	8001b2c <HAL_RCC_OscConfig+0x358>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x340>
 8001afa:	4b61      	ldr	r3, [pc, #388]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	4a60      	ldr	r2, [pc, #384]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b06:	4b5e      	ldr	r3, [pc, #376]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0a:	4a5d      	ldr	r2, [pc, #372]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0x358>
 8001b14:	4b5a      	ldr	r3, [pc, #360]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b18:	4a59      	ldr	r2, [pc, #356]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b20:	4b57      	ldr	r3, [pc, #348]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b24:	4a56      	ldr	r2, [pc, #344]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d015      	beq.n	8001b60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7fe ff3c 	bl	80009b0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7fe ff38 	bl	80009b0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0d7      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b52:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0ee      	beq.n	8001b3c <HAL_RCC_OscConfig+0x368>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7fe ff26 	bl	80009b0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7fe ff22 	bl	80009b0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0c1      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7e:	4b40      	ldr	r3, [pc, #256]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ee      	bne.n	8001b68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	4a3a      	ldr	r2, [pc, #232]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80ad 	beq.w	8001d00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba6:	4b36      	ldr	r3, [pc, #216]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d060      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d145      	bne.n	8001c46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b33      	ldr	r3, [pc, #204]	@ (8001c88 <HAL_RCC_OscConfig+0x4b4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fef6 	bl	80009b0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7fe fef2 	bl	80009b0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e093      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	4b29      	ldr	r3, [pc, #164]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	085b      	lsrs	r3, r3, #1
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c08:	061b      	lsls	r3, r3, #24
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	071b      	lsls	r3, r3, #28
 8001c12:	491b      	ldr	r1, [pc, #108]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <HAL_RCC_OscConfig+0x4b4>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7fe fec7 	bl	80009b0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe fec3 	bl	80009b0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e064      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x452>
 8001c44:	e05c      	b.n	8001d00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_RCC_OscConfig+0x4b4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7fe feb0 	bl	80009b0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe feac 	bl	80009b0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e04d      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x480>
 8001c72:	e045      	b.n	8001d00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e040      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
 8001c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <HAL_RCC_OscConfig+0x538>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d030      	beq.n	8001cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d129      	bne.n	8001cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d122      	bne.n	8001cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d119      	bne.n	8001cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d10f      	bne.n	8001cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e042      	b.n	8001da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fd0e 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	@ 0x24
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fce5 	bl	8002724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d112      	bne.n	8001df0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_UART_Receive_IT+0x26>
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00b      	b.n	8001df2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fac4 	bl	8002374 <UART_Start_Receive_IT>
 8001dec:	4603      	mov	r3, r0
 8001dee:	e000      	b.n	8001df2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
  }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0ba      	sub	sp, #232	@ 0xe8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_UART_IRQHandler+0x66>
 8001e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fba3 	bl	80025a6 <UART_Receive_IT>
      return;
 8001e60:	e25b      	b.n	800231a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80de 	beq.w	8002028 <HAL_UART_IRQHandler+0x22c>
 8001e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80d1 	beq.w	8002028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_UART_IRQHandler+0xae>
 8001e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_UART_IRQHandler+0xd2>
 8001eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_UART_IRQHandler+0xf6>
 8001eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f043 0204 	orr.w	r2, r3, #4
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d011      	beq.n	8001f22 <HAL_UART_IRQHandler+0x126>
 8001efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f043 0208 	orr.w	r2, r3, #8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 81f2 	beq.w	8002310 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_UART_IRQHandler+0x14e>
 8001f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fb2e 	bl	80025a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f54:	2b40      	cmp	r3, #64	@ 0x40
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_UART_IRQHandler+0x17a>
 8001f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d04f      	beq.n	8002016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa36 	bl	80023e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f86:	2b40      	cmp	r3, #64	@ 0x40
 8001f88:	d141      	bne.n	800200e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3314      	adds	r3, #20
 8001f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f98:	e853 3f00 	ldrex	r3, [r3]
 8001f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3314      	adds	r3, #20
 8001fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001fc6:	e841 2300 	strex	r3, r2, [r1]
 8001fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1d9      	bne.n	8001f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d013      	beq.n	8002006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80021dc <HAL_UART_IRQHandler+0x3e0>)
 8001fe4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fe6d 	bl	8000cca <HAL_DMA_Abort_IT>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002000:	4610      	mov	r0, r2
 8002002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002004:	e00e      	b.n	8002024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f99e 	bl	8002348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800200c:	e00a      	b.n	8002024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f99a 	bl	8002348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002014:	e006      	b.n	8002024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f996 	bl	8002348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002022:	e175      	b.n	8002310 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002024:	bf00      	nop
    return;
 8002026:	e173      	b.n	8002310 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 814f 	bne.w	80022d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8148 	beq.w	80022d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8141 	beq.w	80022d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	2b40      	cmp	r3, #64	@ 0x40
 8002070:	f040 80b6 	bne.w	80021e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8145 	beq.w	8002314 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800208e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002092:	429a      	cmp	r2, r3
 8002094:	f080 813e 	bcs.w	8002314 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800209e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020aa:	f000 8088 	beq.w	80021be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020bc:	e853 3f00 	ldrex	r3, [r3]
 80020c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80020c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	330c      	adds	r3, #12
 80020d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80020da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80020e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020ea:	e841 2300 	strex	r3, r2, [r1]
 80020ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80020f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1d9      	bne.n	80020ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3314      	adds	r3, #20
 8002100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002104:	e853 3f00 	ldrex	r3, [r3]
 8002108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800210a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3314      	adds	r3, #20
 800211a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800211e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800212a:	e841 2300 	strex	r3, r2, [r1]
 800212e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e1      	bne.n	80020fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3314      	adds	r3, #20
 800213c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800214c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3314      	adds	r3, #20
 8002156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800215a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800215c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002162:	e841 2300 	strex	r3, r2, [r1]
 8002166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1e3      	bne.n	8002136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002186:	e853 3f00 	ldrex	r3, [r3]
 800218a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800218c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800218e:	f023 0310 	bic.w	r3, r3, #16
 8002192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	330c      	adds	r3, #12
 800219c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80021a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021a8:	e841 2300 	strex	r3, r2, [r1]
 80021ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80021ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e3      	bne.n	800217c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fd16 	bl	8000bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4619      	mov	r1, r3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f8c1 	bl	800235c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021da:	e09b      	b.n	8002314 <HAL_UART_IRQHandler+0x518>
 80021dc:	080024af 	.word	0x080024af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 808e 	beq.w	8002318 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80021fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8089 	beq.w	8002318 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	e853 3f00 	ldrex	r3, [r3]
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800221c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800222a:	647a      	str	r2, [r7, #68]	@ 0x44
 800222c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002232:	e841 2300 	strex	r3, r2, [r1]
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e3      	bne.n	8002206 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3314      	adds	r3, #20
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	e853 3f00 	ldrex	r3, [r3]
 800224c:	623b      	str	r3, [r7, #32]
   return(result);
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3314      	adds	r3, #20
 800225e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002262:	633a      	str	r2, [r7, #48]	@ 0x30
 8002264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800226a:	e841 2300 	strex	r3, r2, [r1]
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e3      	bne.n	800223e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	330c      	adds	r3, #12
 800228a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	e853 3f00 	ldrex	r3, [r3]
 8002292:	60fb      	str	r3, [r7, #12]
   return(result);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0310 	bic.w	r3, r3, #16
 800229a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80022a8:	61fa      	str	r2, [r7, #28]
 80022aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ac:	69b9      	ldr	r1, [r7, #24]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	e841 2300 	strex	r3, r2, [r1]
 80022b4:	617b      	str	r3, [r7, #20]
   return(result);
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e3      	bne.n	8002284 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f847 	bl	800235c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022ce:	e023      	b.n	8002318 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d009      	beq.n	80022f0 <HAL_UART_IRQHandler+0x4f4>
 80022dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f8f4 	bl	80024d6 <UART_Transmit_IT>
    return;
 80022ee:	e014      	b.n	800231a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00e      	beq.n	800231a <HAL_UART_IRQHandler+0x51e>
 80022fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f934 	bl	8002576 <UART_EndTransmit_IT>
    return;
 800230e:	e004      	b.n	800231a <HAL_UART_IRQHandler+0x51e>
    return;
 8002310:	bf00      	nop
 8002312:	e002      	b.n	800231a <HAL_UART_IRQHandler+0x51e>
      return;
 8002314:	bf00      	nop
 8002316:	e000      	b.n	800231a <HAL_UART_IRQHandler+0x51e>
      return;
 8002318:	bf00      	nop
  }
}
 800231a:	37e8      	adds	r7, #232	@ 0xe8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2222      	movs	r2, #34	@ 0x22
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0220 	orr.w	r2, r2, #32
 80023d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b095      	sub	sp, #84	@ 0x54
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	330c      	adds	r3, #12
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fa:	e853 3f00 	ldrex	r3, [r3]
 80023fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	330c      	adds	r3, #12
 800240e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002410:	643a      	str	r2, [r7, #64]	@ 0x40
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002418:	e841 2300 	strex	r3, r2, [r1]
 800241c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e5      	bne.n	80023f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3314      	adds	r3, #20
 800242a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	e853 3f00 	ldrex	r3, [r3]
 8002432:	61fb      	str	r3, [r7, #28]
   return(result);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3314      	adds	r3, #20
 8002442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800244a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800244c:	e841 2300 	strex	r3, r2, [r1]
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e5      	bne.n	8002424 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	2b01      	cmp	r3, #1
 800245e:	d119      	bne.n	8002494 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	e853 3f00 	ldrex	r3, [r3]
 800246e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f023 0310 	bic.w	r3, r3, #16
 8002476:	647b      	str	r3, [r7, #68]	@ 0x44
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002480:	61ba      	str	r2, [r7, #24]
 8002482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002484:	6979      	ldr	r1, [r7, #20]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	e841 2300 	strex	r3, r2, [r1]
 800248c:	613b      	str	r3, [r7, #16]
   return(result);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e5      	bne.n	8002460 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024a2:	bf00      	nop
 80024a4:	3754      	adds	r7, #84	@ 0x54
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff ff3d 	bl	8002348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b21      	cmp	r3, #33	@ 0x21
 80024e8:	d13e      	bne.n	8002568 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f2:	d114      	bne.n	800251e <UART_Transmit_IT+0x48>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d110      	bne.n	800251e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002510:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	621a      	str	r2, [r3, #32]
 800251c:	e008      	b.n	8002530 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6211      	str	r1, [r2, #32]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29b      	uxth	r3, r3
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4619      	mov	r1, r3
 800253e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10f      	bne.n	8002564 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002552:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002562:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800258c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fec2 	bl	8002320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08c      	sub	sp, #48	@ 0x30
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b22      	cmp	r3, #34	@ 0x22
 80025b8:	f040 80ae 	bne.w	8002718 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c4:	d117      	bne.n	80025f6 <UART_Receive_IT+0x50>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d113      	bne.n	80025f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	1c9a      	adds	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80025f4:	e026      	b.n	8002644 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002608:	d007      	beq.n	800261a <UART_Receive_IT+0x74>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <UART_Receive_IT+0x82>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e008      	b.n	800263a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002634:	b2da      	uxtb	r2, r3
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29b      	uxth	r3, r3
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4619      	mov	r1, r3
 8002652:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002654:	2b00      	cmp	r3, #0
 8002656:	d15d      	bne.n	8002714 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0220 	bic.w	r2, r2, #32
 8002666:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	2b01      	cmp	r3, #1
 800269c:	d135      	bne.n	800270a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	e853 3f00 	ldrex	r3, [r3]
 80026b2:	613b      	str	r3, [r7, #16]
   return(result);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f023 0310 	bic.w	r3, r3, #16
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c4:	623a      	str	r2, [r7, #32]
 80026c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	69f9      	ldr	r1, [r7, #28]
 80026ca:	6a3a      	ldr	r2, [r7, #32]
 80026cc:	e841 2300 	strex	r3, r2, [r1]
 80026d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e5      	bne.n	80026a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d10a      	bne.n	80026fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002700:	4619      	mov	r1, r3
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fe2a 	bl	800235c <HAL_UARTEx_RxEventCallback>
 8002708:	e002      	b.n	8002710 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fe12 	bl	8002334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e002      	b.n	800271a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3730      	adds	r7, #48	@ 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b0c0      	sub	sp, #256	@ 0x100
 800272a:	af00      	add	r7, sp, #0
 800272c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002740:	68d9      	ldr	r1, [r3, #12]
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	ea40 0301 	orr.w	r3, r0, r1
 800274c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800274e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	431a      	orrs	r2, r3
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	431a      	orrs	r2, r3
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800277c:	f021 010c 	bic.w	r1, r1, #12
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800278a:	430b      	orrs	r3, r1
 800278c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279e:	6999      	ldr	r1, [r3, #24]
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	ea40 0301 	orr.w	r3, r0, r1
 80027aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b8f      	ldr	r3, [pc, #572]	@ (80029f0 <UART_SetConfig+0x2cc>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d005      	beq.n	80027c4 <UART_SetConfig+0xa0>
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b8d      	ldr	r3, [pc, #564]	@ (80029f4 <UART_SetConfig+0x2d0>)
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d104      	bne.n	80027ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027c4:	f7fe fdc2 	bl	800134c <HAL_RCC_GetPCLK2Freq>
 80027c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027cc:	e003      	b.n	80027d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ce:	f7fe fda9 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 80027d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027e0:	f040 810c 	bne.w	80029fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027f6:	4622      	mov	r2, r4
 80027f8:	462b      	mov	r3, r5
 80027fa:	1891      	adds	r1, r2, r2
 80027fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027fe:	415b      	adcs	r3, r3
 8002800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002806:	4621      	mov	r1, r4
 8002808:	eb12 0801 	adds.w	r8, r2, r1
 800280c:	4629      	mov	r1, r5
 800280e:	eb43 0901 	adc.w	r9, r3, r1
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800281e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002826:	4690      	mov	r8, r2
 8002828:	4699      	mov	r9, r3
 800282a:	4623      	mov	r3, r4
 800282c:	eb18 0303 	adds.w	r3, r8, r3
 8002830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002834:	462b      	mov	r3, r5
 8002836:	eb49 0303 	adc.w	r3, r9, r3
 800283a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800284a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800284e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002852:	460b      	mov	r3, r1
 8002854:	18db      	adds	r3, r3, r3
 8002856:	653b      	str	r3, [r7, #80]	@ 0x50
 8002858:	4613      	mov	r3, r2
 800285a:	eb42 0303 	adc.w	r3, r2, r3
 800285e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002868:	f7fd fccc 	bl	8000204 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4b61      	ldr	r3, [pc, #388]	@ (80029f8 <UART_SetConfig+0x2d4>)
 8002872:	fba3 2302 	umull	r2, r3, r3, r2
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	011c      	lsls	r4, r3, #4
 800287a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800287e:	2200      	movs	r2, #0
 8002880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002884:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800288c:	4642      	mov	r2, r8
 800288e:	464b      	mov	r3, r9
 8002890:	1891      	adds	r1, r2, r2
 8002892:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002894:	415b      	adcs	r3, r3
 8002896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800289c:	4641      	mov	r1, r8
 800289e:	eb12 0a01 	adds.w	sl, r2, r1
 80028a2:	4649      	mov	r1, r9
 80028a4:	eb43 0b01 	adc.w	fp, r3, r1
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028bc:	4692      	mov	sl, r2
 80028be:	469b      	mov	fp, r3
 80028c0:	4643      	mov	r3, r8
 80028c2:	eb1a 0303 	adds.w	r3, sl, r3
 80028c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028ca:	464b      	mov	r3, r9
 80028cc:	eb4b 0303 	adc.w	r3, fp, r3
 80028d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028e8:	460b      	mov	r3, r1
 80028ea:	18db      	adds	r3, r3, r3
 80028ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80028ee:	4613      	mov	r3, r2
 80028f0:	eb42 0303 	adc.w	r3, r2, r3
 80028f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028fe:	f7fd fc81 	bl	8000204 <__aeabi_uldivmod>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4611      	mov	r1, r2
 8002908:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <UART_SetConfig+0x2d4>)
 800290a:	fba3 2301 	umull	r2, r3, r3, r1
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2264      	movs	r2, #100	@ 0x64
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	1acb      	subs	r3, r1, r3
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800291e:	4b36      	ldr	r3, [pc, #216]	@ (80029f8 <UART_SetConfig+0x2d4>)
 8002920:	fba3 2302 	umull	r2, r3, r3, r2
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800292c:	441c      	add	r4, r3
 800292e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002938:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800293c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002940:	4642      	mov	r2, r8
 8002942:	464b      	mov	r3, r9
 8002944:	1891      	adds	r1, r2, r2
 8002946:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002948:	415b      	adcs	r3, r3
 800294a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800294c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002950:	4641      	mov	r1, r8
 8002952:	1851      	adds	r1, r2, r1
 8002954:	6339      	str	r1, [r7, #48]	@ 0x30
 8002956:	4649      	mov	r1, r9
 8002958:	414b      	adcs	r3, r1
 800295a:	637b      	str	r3, [r7, #52]	@ 0x34
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002968:	4659      	mov	r1, fp
 800296a:	00cb      	lsls	r3, r1, #3
 800296c:	4651      	mov	r1, sl
 800296e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002972:	4651      	mov	r1, sl
 8002974:	00ca      	lsls	r2, r1, #3
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	4603      	mov	r3, r0
 800297c:	4642      	mov	r2, r8
 800297e:	189b      	adds	r3, r3, r2
 8002980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002984:	464b      	mov	r3, r9
 8002986:	460a      	mov	r2, r1
 8002988:	eb42 0303 	adc.w	r3, r2, r3
 800298c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800299c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029a4:	460b      	mov	r3, r1
 80029a6:	18db      	adds	r3, r3, r3
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029aa:	4613      	mov	r3, r2
 80029ac:	eb42 0303 	adc.w	r3, r2, r3
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029ba:	f7fd fc23 	bl	8000204 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <UART_SetConfig+0x2d4>)
 80029c4:	fba3 1302 	umull	r1, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	2164      	movs	r1, #100	@ 0x64
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	3332      	adds	r3, #50	@ 0x32
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <UART_SetConfig+0x2d4>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 0207 	and.w	r2, r3, #7
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4422      	add	r2, r4
 80029ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029ec:	e106      	b.n	8002bfc <UART_SetConfig+0x4d8>
 80029ee:	bf00      	nop
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a0e:	4642      	mov	r2, r8
 8002a10:	464b      	mov	r3, r9
 8002a12:	1891      	adds	r1, r2, r2
 8002a14:	6239      	str	r1, [r7, #32]
 8002a16:	415b      	adcs	r3, r3
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a1e:	4641      	mov	r1, r8
 8002a20:	1854      	adds	r4, r2, r1
 8002a22:	4649      	mov	r1, r9
 8002a24:	eb43 0501 	adc.w	r5, r3, r1
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	00eb      	lsls	r3, r5, #3
 8002a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a36:	00e2      	lsls	r2, r4, #3
 8002a38:	4614      	mov	r4, r2
 8002a3a:	461d      	mov	r5, r3
 8002a3c:	4643      	mov	r3, r8
 8002a3e:	18e3      	adds	r3, r4, r3
 8002a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a44:	464b      	mov	r3, r9
 8002a46:	eb45 0303 	adc.w	r3, r5, r3
 8002a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	008b      	lsls	r3, r1, #2
 8002a6e:	4621      	mov	r1, r4
 8002a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a74:	4621      	mov	r1, r4
 8002a76:	008a      	lsls	r2, r1, #2
 8002a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a7c:	f7fd fbc2 	bl	8000204 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4b60      	ldr	r3, [pc, #384]	@ (8002c08 <UART_SetConfig+0x4e4>)
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	011c      	lsls	r4, r3, #4
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	1891      	adds	r1, r2, r2
 8002aa6:	61b9      	str	r1, [r7, #24]
 8002aa8:	415b      	adcs	r3, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	1851      	adds	r1, r2, r1
 8002ab4:	6139      	str	r1, [r7, #16]
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	414b      	adcs	r3, r1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac8:	4659      	mov	r1, fp
 8002aca:	00cb      	lsls	r3, r1, #3
 8002acc:	4651      	mov	r1, sl
 8002ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	00ca      	lsls	r2, r1, #3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	4642      	mov	r2, r8
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	460a      	mov	r2, r1
 8002ae8:	eb42 0303 	adc.w	r3, r2, r3
 8002aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002afa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b08:	4649      	mov	r1, r9
 8002b0a:	008b      	lsls	r3, r1, #2
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b12:	4641      	mov	r1, r8
 8002b14:	008a      	lsls	r2, r1, #2
 8002b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b1a:	f7fd fb73 	bl	8000204 <__aeabi_uldivmod>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	4b38      	ldr	r3, [pc, #224]	@ (8002c08 <UART_SetConfig+0x4e4>)
 8002b26:	fba3 2301 	umull	r2, r3, r3, r1
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2264      	movs	r2, #100	@ 0x64
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	1acb      	subs	r3, r1, r3
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	3332      	adds	r3, #50	@ 0x32
 8002b38:	4a33      	ldr	r2, [pc, #204]	@ (8002c08 <UART_SetConfig+0x4e4>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b44:	441c      	add	r4, r3
 8002b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b54:	4642      	mov	r2, r8
 8002b56:	464b      	mov	r3, r9
 8002b58:	1891      	adds	r1, r2, r2
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b64:	4641      	mov	r1, r8
 8002b66:	1851      	adds	r1, r2, r1
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	414b      	adcs	r3, r1
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	00cb      	lsls	r3, r1, #3
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b86:	4651      	mov	r1, sl
 8002b88:	00ca      	lsls	r2, r1, #3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4642      	mov	r2, r8
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b96:	464b      	mov	r3, r9
 8002b98:	460a      	mov	r2, r1
 8002b9a:	eb42 0303 	adc.w	r3, r2, r3
 8002b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002baa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bb8:	4649      	mov	r1, r9
 8002bba:	008b      	lsls	r3, r1, #2
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc2:	4641      	mov	r1, r8
 8002bc4:	008a      	lsls	r2, r1, #2
 8002bc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bca:	f7fd fb1b 	bl	8000204 <__aeabi_uldivmod>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <UART_SetConfig+0x4e4>)
 8002bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	2164      	movs	r1, #100	@ 0x64
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	3332      	adds	r3, #50	@ 0x32
 8002be6:	4a08      	ldr	r2, [pc, #32]	@ (8002c08 <UART_SetConfig+0x4e4>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4422      	add	r2, r4
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c02:	46bd      	mov	sp, r7
 8002c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c08:	51eb851f 	.word	0x51eb851f

08002c0c <memset>:
 8002c0c:	4402      	add	r2, r0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c54 <__libc_init_array+0x38>)
 8002c20:	4c0d      	ldr	r4, [pc, #52]	@ (8002c58 <__libc_init_array+0x3c>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	2600      	movs	r6, #0
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8002c5c <__libc_init_array+0x40>)
 8002c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8002c60 <__libc_init_array+0x44>)
 8002c30:	f000 f818 	bl	8002c64 <_init>
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	2600      	movs	r6, #0
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	08002c9c 	.word	0x08002c9c
 8002c58:	08002c9c 	.word	0x08002c9c
 8002c5c:	08002c9c 	.word	0x08002c9c
 8002c60:	08002ca0 	.word	0x08002ca0

08002c64 <_init>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	bf00      	nop
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr

08002c70 <_fini>:
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	bf00      	nop
 8002c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c76:	bc08      	pop	{r3}
 8002c78:	469e      	mov	lr, r3
 8002c7a:	4770      	bx	lr
